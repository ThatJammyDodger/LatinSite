@page "/interop"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using LatinVocabTest.Data

<h3>InteropTest</h3>

<button class="btn btn-success" @onclick="ShowAlert">Show alert</button>

<br/>

<h3 id="result">abc</h3>

@if (words == null)
{
    <p>Loading</p>
}
else 
{
    

    <input class="form-control" type="text" @oninput="@((e) => { queryString=(string)e.Value!; UpdateStuff();})" @bind="queryString" placeholder="enter here"/>
    
    @foreach(var x in querySuggestions)
    {
        <button class="btn alert-secondary" style="margin: 10px 10px 5px 5px;" @onclick="@(() => { queryString=x.ToString(); UpdateStuff(); })">@x</button>
    }
}


<style>
    #result {
      opacity: 1;
      -webkit-transition: opacity 0.3s ease-in-out;
      -moz-transition: opacity 0.3s ease-in-out;
      -o-transition: opacity 0.3s ease-in-out;
      transition: opacity 0.3s ease-in-out;
    }
    #result.fade {
      opacity:0;
    }
</style>


@code {
    private List<string> all_latin_words = new List<string>();
    private any_word[]? words;    
    protected override async Task OnInitializedAsync()
    {
        words = await Http.GetFromJsonAsync<any_word[]>("data/anywords_latin.json");
        foreach(any_word x in words!)
        {
            string[] temp = x.In_English!.Split(",");
            foreach(string y in temp)
            {
                all_latin_words.Add(y.Trim());
            }
        }   
    }

    // WORKING BIT

    private string queryString = "";
    private List<string> querySuggestions = new List<string>();

    async void UpdateStuff()
    {
        querySuggestions.Clear();
        List<string> temp = await PossibleResults(queryString);
        querySuggestions = temp.Distinct().ToList();
    }

    private async Task<List<string>> PossibleResults(string searchText)
    {
        if (String.IsNullOrWhiteSpace(searchText))
        {
            return new List<string>();
        }
        return await Task.FromResult(all_latin_words.Where(x => x.ToLower().Contains(searchText.ToLower())).ToList());
    }



    async Task ShowAlert()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "makeAlert","Stay Alert! Control The Virus! Protect The NHS!");
        await JsRuntime.InvokeVoidAsync(identifier: "fade","result");
    }
}
