@page "/vocab-test"
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IModalService modal
@using LatinVocabTest.Data
@using Newtonsoft.Json

<PageTitle>Vocab Test</PageTitle>


<h3>Vocab Test</h3>

@if (words is null)
{
    <div class="epicloader"></div>
}
else
{
    <Animate Animation="Animations.FadeLeft" Easing="Easings.EaseOutQuad" Duration="TimeSpan.FromSeconds(1)">

        <button style="float: right; margin-right:5%" class="btn btn-success btn-sm" @onclick="ShowModal">Show Results</button> 

        <!-- PRE-PLAY -->
    
        <EditForm Model="selectMode" OnValidSubmit="Start">
            <div style="display: @(InPlay ? "none" : "block"); margin-bottom:10px">
                <h5>Mode:</h5>
                <h6 style="color: red; display: @(selectMode.Success||selectMode.Mode!=null ? "none" : "block")">Please select an option</h6> 

                <div class="form-check">
                    <InputRadioGroup @bind-Value="selectMode.Mode" >
                        @foreach(string x in modes)
                        {
                            <div style="margin-bottom: 5px">
                                <InputRadio id="@x" class="form-check-input" Value="@x" />
                                <label class="form-check-label" for="@x">@x</label>
                                <br/>
                            </div>
                        }
                    </InputRadioGroup>

                    <hr style="margin-left: 0; width:25%;">

                    <div>
                        <input id="check" class="form-check-input" type="checkbox" @bind="@showSuggestions" />
                        <label class="form-check-label" for="check">Show hints?</label>
                    </div>
                                        
                    <div class="input-group" style="width: 300px; margin-top:10px; margin-bottom:10px; opacity: @(showSuggestions? "1" : "0.5")">
                        <div class="input-group-prepend input-group-sm">
                            <span class="input-group-text" id="inputGroupPrepend3">Show hints after</span>
                        </div>
                        <select class="form-control form-control-sm" @bind="showSuggestionsAfter" aria-describedby="inputGroupPrepend3" disabled="@(!showSuggestions)" >
                            <option value="1">1 character</option>
                            <option value="2">2 characters</option>
                            <option value="3">3 characters</option>
                            <option value="4">4 characters</option>
                            <option value="5">5 characters</option>
                        </select>
                    </div>                    
                </div>
                <button style="margin-top: 10px" class="btn btn-primary" type="submit">Start</button>
                <hr>
                <p>Please note: the score for both modes is shared because all current play data is stored to your browser's local storage session. If you want to clear this, open the Results popup and click 'Clear all'</p>
            </div>
        </EditForm>

        <!-- DURING PLAY -->

        <div style=' display: @(!InPlay ? "none" : "block"); margin-left: 5px'>
            <h6 style="font-weight: bold">@testWord</h6>

            <div style="display: flex;">
                <input @ref="entryBox" class="form-control" size="25" style="padding-right:20px; margin:5px 10px 10px 0px" type="text" placeholder="Enter answer here" @oninput="@((e) => 
                    { 
                        enteredValue=(string)e.Value!; 
                        UpdateStuff();
                    })" 
                @onkeydown="@Enter" readonly="@(Q_Answered)"  @bind="@enteredValue" autofocus />
            
                <div id="result" style="flex-basis:40%">
                    <img style="max-width: 100%" src="@imgSource" height="35" width="35"/>
                    <a style="max-width:100%">@correction</a>
                </div>
            </div>

            <!-- SUGGESTIONS -->
            <div style=' display: @(showSuggestions ? "block" : "none");'>
                @if (showSuggestions)
                {
                    int i = 0;
                    @foreach (var x in querySuggestions)
                    {
                        if (i >= 3)
                        {
                            break;
                        }
                        <button style="margin-right:10px;" class="btn btn-sm alert-secondary" @onclick="@(() => { enteredValue=x; QuestionButtonPressed(); })">@x</button>
                        i++;
                    }
                }
                
            </div>
            

            <button style="margin-bottom:10px; margin-top:10px;" class="btn btn-sm btn-primary" @onclick="QuestionButtonPressed">@buttonContent</button>

            <!--<h5>Score: @questions_right/@questions_asked</h5> <p></p>-->
            <h5>Score: @big_list.totalCorrect/@big_list.totalAsked</h5> <p></p>

            <hr>

            @if(selectMode.Mode=="English to Latin")
            {
                <p>Note: give the first principle part for verbs and the nominative singular form for most nouns and adjectives.</p>
            }
            else
            {
                <p>Note: give the meaning of the verbs on their own. E.g. for 'moveo', write 'move', not 'to move'.</p>
            }
            <p>Either hit the enter/return key or click any button (including the hint buttons) to move onto the next question.</p>
        </div>

        <br />
        @*@foreach(var x in big_list.all_results)
        {
            <span style="white-space: pre-line">@x.ToString()</span>
            <br />
        }*@
    </Animate>
}



@code {
    public Random rnd = new Random();
    private int randNum = 0;

    private string enteredValue = "";
    private string? testWord;
    private List<string> testWordAnswer = new List<string>();
    private ElementReference entryBox;

    private bool InPlay = false;
    mode selectMode = new mode();
    private string[] modes = { "Latin to English", "English to Latin" };
    private string buttonContent = "";

    private bool Q_Answered = false;
    private string? imgSource = @"images/null.png";
    private string correction = "";

    private int questions_asked = 0;
    private int questions_right = 0;

    private List<string> all_latin_words = new List<string>();
    private List<string> all_english_words = new List<string>();
    private any_word[]? words;
    private any_word[]? RVL;
    private char[] forbidden_chars = { '.',',','/','?',';','#','!','-','[',']','\''};

    private List<string> querySuggestions = new List<string>();
    private bool showSuggestions = false;
    private int showSuggestionsAfter = 3;

    private AllResults big_list = new AllResults();
    private const string noteKey = "quiz_results";

    private string remove_chars(string x)
    {
        return String.Join("", x.Split(forbidden_chars));
    }



    // STARTUP CODE

    protected override async Task OnInitializedAsync()
    {
        words = await Http.GetFromJsonAsync<any_word[]>("data/anywords_latin.json");
        RVL = await Http.GetFromJsonAsync<any_word[]>("data/RVL_latin.json");
        foreach(any_word x in words!)
        {
            string[] temp = x.In_English!.Split(",");
            foreach(string y in temp)
            {
                all_latin_words.Add(y.Trim());
            } 
        }
        foreach(any_word x in RVL!)
        {
            string[] temp = x.In_Latin!.Split(",");
            foreach(string y in temp)
            {
                all_english_words.Add(y.Trim());
            }
        }
        if (await localStore.ContainKeyAsync(noteKey))
        {
            ReadLocalStorage();
        } else 
        {
            UpdateLocalStorage();
        }
        
    }



    // UPDATES AUTO-SUGGESTIONS

    void UpdateStuff()
    {
        querySuggestions.Clear();

        if (enteredValue.Length >= showSuggestionsAfter && showSuggestions)
        {
            if (selectMode.Mode=="Latin to English")
            {
                querySuggestions = ((
                    from x in all_latin_words
                    where x.Contains(enteredValue.ToLower())
                    select x)
                    .Distinct().ToList()
                );
            }
            else if (selectMode.Mode=="English to Latin")
            {
                querySuggestions = ((
                    from x in all_english_words
                    where x.Contains(enteredValue.ToLower())
                    select x)
                    .Distinct().ToList()
                );
            }
        }
    }



    // CODE RUN WHEN START BUTTON PRESSED

    private void Start()
    {
        if (selectMode.Mode != null)
        {
            selectMode.Success = true;
            if (!InPlay)
            {
                NextWord();
                InPlay = true;
                buttonContent = "Submit";
                ReadLocalStorage();
            }
        }
        else
        {
            selectMode.Success = false;
        }
    }



    // CODE RUN TO PROGRESS TO NEXT WORD OF QUIZ

    private async void NextWord()
    {
        UpdateStuff();
        questions_asked++;
        Q_Answered = false;

        if (selectMode.Mode=="English to Latin" && RVL is not null)
        {
            randNum = rnd.Next(0, RVL.Length);
            testWord = RVL[randNum].In_English;
            testWordAnswer = new List<string>(RVL[randNum].In_Latin!.Split(','));
        }
        else if (selectMode.Mode=="Latin to English" && words is not null)
        {
            randNum = rnd.Next(0, words.Length);
            testWord = words[randNum].In_Latin;
            testWordAnswer = new List<string>(words[randNum].In_English!.Split(','));
        }
        await resultAnim("0");
    }



    // CODE RUN TO CHECK USER'S ANSWER AND RETURN A VALUE

    private bool check()
    {
        bool result = false;
        foreach(string x in testWordAnswer)
        {
            if (remove_chars(x.Trim()).ToUpper() == remove_chars(enteredValue!.Trim()).ToUpper())
            {
                questions_right++;
                result = true;
            }
        }

        if (selectMode.Mode is "Latin to English")
        {
            var x = words![randNum];
            new results(x.In_English!,x.In_Latin!,"Latin to English",showSuggestions,result);
        } 
        else if (selectMode.Mode is "English to Latin")
        {
            var x = RVL![randNum];
            new results(x.In_English!,x.In_Latin!,"English to Latin",showSuggestions,result);
        }

        big_list.Update();
        UpdateLocalStorage();

        return result;
    }



    // CODE RUN WHEN ENTER PRESSED INSIDE TEXTBOX OF FORM

    public void Enter(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            QuestionButtonPressed();
        }
    }



    // NEXT BUTTON PRESSED

    public async void QuestionButtonPressed()
    {
        ReadLocalStorage();
        if (!String.IsNullOrWhiteSpace(enteredValue))
        {
            if (!Q_Answered)
            {
                bool right = check();
                Q_Answered = true;
                buttonContent = "Next";
                if (right)
                {
                    correction = String.Empty;
                    await resultAnim("correct");
                }
                else
                {
                    if (selectMode.Mode=="English to Latin" && RVL is not null)
                    {
                        correction = $"Correct: {RVL[randNum].In_Latin}";
                    }
                    else if (selectMode.Mode=="Latin to English" && words is not null)
                    {
                        correction = $"Correct: {words[randNum].In_English}";
                    }
                    await resultAnim("incorrect");
                }
                ReadLocalStorage();
            }
            else
            {
                enteredValue = String.Empty;
                NextWord();
                buttonContent = "Submit";
                await entryBox.FocusAsync();
            }
        }
    }



    // ANIMATION FOR TICK OR CROSS

    private async Task resultAnim(string result)
    {
        imgSource = (result != "0") ? $@"images/{result}.png" : imgSource;
        await JsRuntime.InvokeVoidAsync("fade","result");
    }



    // CODE TO USE LOCAL STORAGE

    public async void UpdateLocalStorage()
    {
        await localStore.SetItemAsync(noteKey, big_list.JSONstring());
    }
    public void ClearLocalStorage()
    {
        big_list = new AllResults();
        ClearSimpleResults();
        UpdateLocalStorage();
    }
    public async void ReadLocalStorage()
    {
        UpdateSimpleResults();
        big_list = JsonConvert.DeserializeObject<AllResults>(await localStore.GetItemAsync<string>(noteKey))!;
        StateHasChanged();
    }
    void UpdateSimpleResults()
    {
        results.all_results = new List<results>(big_list.all_results);
        results.totalAsked = big_list.totalAsked;
        results.totalCorrect = big_list.totalCorrect;
    }
    void ClearSimpleResults()
    {
        results.all_results.Clear();
        results.totalAsked = 0;
        results.totalCorrect = 0;
    }

    async Task ShowModal()
    {
        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(0.25),
            ContentScrollable = true            
        };

        var formModal = modal.Show<ResultsShow>("Results", options);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            ClearLocalStorage();
        }
    }


    public class mode
    {
        public string? Mode { get; set; }
        public bool Success { get; set; } = true;
    }
}
