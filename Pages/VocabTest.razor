@page "/vocab-test"
@inject HttpClient Http
@inject IJSRuntime JS
@using LatinVocabTest.Data
@using System.Linq

<head>
     <link href="_content/Syncfusion.Blazor/styles/bootstrap4.css" rel="stylesheet" />
</head>


<PageTitle>Vocab Test</PageTitle>

<h1>Vocab Test</h1>
<p>Test yourself here</p>

@if (words == null)
{
    <h5><em>Loading...</em></h5>
}
else
{
    @foreach(any_word x in words)
    {
        string[] temp = x.In_Latin.Split(",");
        foreach(string y in temp)
        {
            all_latin_words.Add(y.Trim());
        }
    }
    
    <div style="display: @(InPlay ? "none" : "block"); margin-bottom:10px">
        <button class="btn btn-outline-primary"  @onclick="Start">Start</button>
    </div>

    


    <div style=' display: @(!InPlay ? "none" : "block");'>
        <h6 style="font-weight: bold">@testWord</h6>

        <div style="display: flex;">
            <input class="form-control" size="25" style="padding-right:20px; margin:5px 10px 10px 0px" type="text" @bind="@enteredValue" placeholder="Enter answer here" @oninput="@((e) => { enteredValue=(string)e.Value;})" @onkeydown="@Enter"/>
            
            <div id="result" style="flex-basis:40%">
                <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" @ref="imgAnim" IsManual="true" Once="false">
                    <img style="max-width: 100%" src="@imgSource" height="35" width="35"/>
                    <a style="max-width:100%">@correction</a>
                </Animate>
            </div>
        </div>

        
        
        <h5>Score: @questions_right/@questions_asked</h5>
    </div>
    
}



@code {
    private string vocab_list = "";

    public Random rnd = new Random();
    private string? enteredValue;
    private string? testWord;
    private List<string> testWordAnswer = new List<string>();
    private int randNum = 0;
    private bool InPlay = false;
    private bool Q_Asked = false;
    private bool Q_Answered = false;
    private any_word[]? words;
    private string? imgSource = @"images/null.png";
    private int questions_asked = 0;
    private int questions_right = 0;
    private string correction = "";
    private List<string>? all_latin_words = new List<string>();

    private char[] forbidden_chars = { '.',',','/','?',';','#','!','-'};

    private string remove_chars(string x)
    {
        return String.Join("", x.Split(forbidden_chars));
    }

    private Animate imgAnim;

    protected override async Task OnInitializedAsync()
    {
        words = await Http.GetFromJsonAsync<any_word[]>("data/anywords_latin.json");
    }

    private void Start()
    {
        if (!InPlay)
        {
            NextWord();
            InPlay = true;
        }
    }

    private void NextWord()
    {
        questions_asked++;
        Q_Answered = false;
        imgSource = @"images/null.png";
        randNum = rnd.Next(0, words.Length);
        testWord = words[randNum].In_Latin;
        testWordAnswer = new List<string>(words[randNum].In_English.Split(','));
        correction = String.Empty;
    }



    private bool check()
    {
        foreach(string x in testWordAnswer)
        {
            if (remove_chars(x.Trim()).ToUpper() == remove_chars(enteredValue.Trim()).ToUpper())
            {
                questions_right++;
                return true;
            }
        }
        return false;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter")&&(!String.IsNullOrWhiteSpace(enteredValue)))
        {
            if (!Q_Answered)
            {
                bool right = check();
                Q_Answered = true;
                if (right)
                {
                    resultAnim("correct");
                }
                else
                {
                    resultAnim("incorrect");
                    correction = $"Correct: {words[randNum].In_English}";

                }
            }
            else
            {
                enteredValue = String.Empty;
                NextWord();
            }
        }
    }

    private void resultAnim(string result)
    {
        imgSource = $@"images/{result}.png";
        imgAnim.Run();
    }

    


    public class any_word
    {
        public string? In_Latin { get; set; }
        public string? In_English { get; set; }
    }
}
